#!/usr/bin/perl -w

use strict;
use IO::Pty::Easy;
use Time::HiRes;
use List::Util qw{min max};

use bytes;

$|=1;

die "Usage: $0 LOGFILE COMMAND...\n" unless (scalar @ARGV > 1);

my $logfile = shift;

my $command = join " ", @ARGV;

#print STDOUT $command;

my $pty = new IO::Pty::Easy;

$pty->spawn( $command );

#if ( fork == 0 ) {
#  while ( $pty->is_active ) {
#    my $output = $pty->read;
#    print $output;
#  }
#  exit;
#}

#sleep 10;

open LOGFILE, $logfile or die "$!";

my $last_timestamp = 0;

my $last_tag = "";

my $last_user = 0;

my $last_user_sent = 0;

while ( <LOGFILE> ) {
  chomp;
  my ( $timestamp, $tag ) = m{^(\d+) (\w+)};
  my $len;
  my $message;
  if ( $tag =~ /^(HOST|USER)/m ) {
    ( $len ) = m{\Q$tag\E (\d+)};
    read LOGFILE, $message, $len;
    my $nl;
    read LOGFILE, $nl, 1;
    die unless $nl eq "\n";
  }

  if ( $tag eq "HOST" and $last_tag eq "USER" ) {
    # drain buffer
    my $host_message = "";
    WAIT: while ( 1 ) {
      my $x = $pty->read( 0.001 );
      my $host_recd = Time::HiRes::time();
      if ( defined $x ) {
      	print $x;
      	if ( $timestamp - $last_user < 20000 ) {
      	  printf STDERR "Delay: %.10f\n", $host_recd - $last_user_sent;
      	  # $last_user = 0;
      	}
	$host_message .= $x;
	if ( $message eq $host_message ) {
	  last WAIT;
	}
      } else {
      	if ( $host_recd - $last_user_sent > .2 ) {
      	  last WAIT;
      	}
      }
    }
    if (index($host_message, 'exit') != -1) {
	exit 1;
    }
  } elsif ( $tag eq "USER" ) {
    my $now = Time::HiRes::time();
    my $sleeptime = ( $timestamp - $last_user ) - ( $now - $last_user_sent );
    if ( $sleeptime > 0 ) {
	$sleeptime = min( $sleeptime, 1000000 );
	Time::HiRes::usleep( $sleeptime );
    }
    $last_user = $timestamp;
  }

  $last_timestamp = $timestamp;
  $last_tag = $tag;

  if ( $tag eq "SIZE" ) {
    my ( $width, $height ) = m{SIZE (\d+) (\d+)};
    print STDERR "New size: $width x $height\n";
  } else {
    if ( $tag eq "USER" ) {
      $pty->write( $message ) or die;
      $last_user_sent = Time::HiRes::time();
#      print (chr 20);
    }
  }
}
